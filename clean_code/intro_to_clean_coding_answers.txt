## Exercises
Please submit your answers to the following questions in a file called intro_to_clean_coding_answers.txt.

1. In your own words, explain what clean code is and why it is important.

A: We spend most of our time reading our code and code from others.
So use clean code is faster and easy to read and easy to maintain
reducing the time we need to spend on it.

2. Read this article about Toyota and their use of bad code. Although you may
not yet understand all of the topics discussed, think about another commonly
used object that relies on computers and explain what would happen if the code
was not created to an acceptable standard.

A: Una example is an ecommerce website, that if the payment method is not
secure or is not well built could charge another amount of money or,
the shipping method could send the package to a wrong customer.

3. Would you consider the following to be clean code? Explain why or
why not. If not, refactor the code.

FUNCTION do(x, y)               // Creating a new function
 IF y = "F" THEN               // Check if y is equal "F"
 SET z to (x−32) * (5/9)       // Formula to convert degrees fahrenheit to celsius
 PRINT z                       // Print result
 ELSE IF y = "C" THEN          // If y not equal to "F", check if equal to "C"
 SET z to x * 1.8000 + 32.00   // Formula to convert degrees celsius to fahrenheit
 PRINT z                       // Print result
 END IF
END FUNCTION

It's not clean code because is not appropriate nesting and is not following
the Squient Test because is difficult to find anything. Variable names don't explain well their purpose.

FUNCTION do(oldTemperature, temperatureType)               // Creating a new function
 IF temperatureType = "F" THEN               // Check if y is equal "F"
  SET newTemperature to (oldTemperature−32) * (5/9)       // Formula to convert degrees fahrenheit to celsius
  PRINT newTemperature                       // Print result
 ELSE IF temperatureType = "C" THEN          // If y not equal to "F", check if equal to "C"
  SET newTemperature to oldTemperature * 1.8000 + 32.00   // Formula to convert degrees celsius to fahrenheit
  PRINT newTemperature                       // Print result
 END IF
END FUNCTION


4. Would you consider the following to be clean code? Explain why or why
not. If not, refactor the code.

FUNCTION calcPercent(sum, total)
 IF NOT(total = 0) THEN
     SET percentage to sum / total * 100
 ELSE
   PRINT "Sorry, cannot divide by 0"
 END IF

 PRINT percentage
END FUNCTION

A: It's appropriate nested, the naming is correct but could be better.
There are not comments, it's very easy to read. Yes, it's clean code.


5. Using pseudocode, refactor the code for the following examples using
the principles you have learned in this checkpoint.

a. The following function prints the subtotal of a customer's transaction
and receives payment accordingly.


FUNCTION checkOutCustomer(subTotal, discountRate, paymentType)
   total = subTotal * discountRate + (subTotal * tax)
   PRINT "Your total due is: " + total

   CALL getPayment RETURNING amount

   IF paymentType = 'CASH' THEN
       PRINT "Change due: " + amount - total
   ELSE IF paymentType = 'CREDIT CARD' THEN
       PRINT "Your credit card has been charged: " + total
   END IF
END FUNCTION


b. The following function checks out a book if there are no issues
with the guest's account.

It was too many IF statements nested.

FUNCTION checkoutBook(book, guest)
 IF guest.accountActive AND NOT(guest.hasOverdueBooks) AND
 guest.outstandingFees = 0 THEN
     APPEND book to guest.books
     SET book.status to "Checked Out"
     PRINT "Your books have been issued."
 ELSE
     PRINT "Unable to check out book."
 END IF
END FUNCTION

c.  The following class is a code snippet that should support the
transactions a customer can perform at an ATM.

CLASS BankAccount

 FUNCTION displayBalance
    PRINT balance
 END FUNCTION

 FUNCTION deposit(amount)
    SET balance to balance + amount
 END FUNCTION

 FUNCTION withdraw(amount)
     IF balance > amount THEN
       SET balance to balance - amount
     END
 END FUNCTION

 FUNCTION creditCardOffer
     IF NOT(customer.hasCreditCard) THEN
         CALL offerCreditCard
     END
 END FUNCTION

 FUNCTION checkStatus
     IF NOT(customer.hasCheckingAccount) THEN
         CALL offerCheckingAccount
     END
 END FUNCTION

 ....
 ....
 ....

END

A: I think it is a good clean code. It's well nested, naming is easy to read.
And every piece of code is in a function.


## Programming Questions

6. Square Given an array of integers, find out whether the sum of the
integers is a perfect square. If it is a perfect square, return the square
root, otherwise return the sum.

```
const perfectSquare = (arr) => {
  let sum = 0;
  arr.forEach(item => {
    sum += item;
  })
  let square = Math.sqrt(sum);
  if(square * square === sum){
    return square;
  } else {
    return sum;
  }
}

console.log(perfectSquare([10,1,4,6,1,1,2]));
console.log(perfectSquare([1,1]));
```

7. Duplicate Given an array of integers, find out whether the array
contains any duplicate elements. The function should return true if any
value appears at least twice in the array, and false if every element is
distinct.

```
const isDuplicated = (arr) => {

  for(let i = 0; i < arr.length; i++){
    for(let j = 0; j < arr.length; j++){
      if(i !== j && arr[i] === arr[j]){
        return true;
      }
    }
  }
  return false;
}

console.log(isDuplicated([1,2,3,4,5]))
console.log(isDuplicated([1,1,2,3,4,5,5]))
```

## Extra Credit

8. Anagram An anagram is a word, phrase, or name formed by rearranging the
letters of another word. For example, spar can be formed from rasp. Given
two strings, stringOne and stringTwo, determine if stringOne is an
anagram of stringTwo. Assume that the strings contain only lowercase
letters and do not worry about case-sensitivity. Hint: Your first task
will be to convert the strings to arrays.

```
const isAnagram = (stringOne, stringTwo) => {
  let one = stringOne.trim().split('').sort().join();
  let two = stringTwo.trim().split('').sort().join();
  if(one === two){
    return true;
  } else {
    return false;
  }
}
```
